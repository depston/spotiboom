const { Client, GatewayIntentBits, Collection, EmbedBuilder } = require('discord.js');
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus, NoSubscriberBehavior } = require('@discordjs/voice');
const SpotifyWebApi = require('spotify-web-api-node');
const play = require('play-dl');
require('dotenv').config({ path: './config.env' });

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Discord
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

// Spotify API
const spotifyApi = new SpotifyWebApi({
    clientId: process.env.SPOTIFY_CLIENT_ID,
    clientSecret: process.env.SPOTIFY_CLIENT_SECRET
});

// –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
client.commands = new Collection();
client.queues = new Map();
client.players = new Map();

// –ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥
const PREFIX = process.env.BOT_PREFIX || '!';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Spotify —Ç–æ–∫–µ–Ω–∞
async function getSpotifyToken() {
    try {
        const data = await spotifyApi.clientCredentialsGrant();
        spotifyApi.setAccessToken(data.body.access_token);
        console.log('Spotify —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Spotify —Ç–æ–∫–µ–Ω–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–∞ –≤ Spotify
async function searchSpotifyTrack(query) {
    try {
        const results = await spotifyApi.searchTracks(query, { limit: 1 });
        if (results.body.tracks.items.length > 0) {
            return results.body.tracks.items[0];
        }
        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Spotify:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏
async function playMusic(interaction, query) {
    const voiceChannel = interaction.member.voice.channel;
    if (!voiceChannel) {
        return interaction.reply('‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!');
    }

    try {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ Spotify
        const spotifyTrack = await searchSpotifyTrack(query);
        let searchQuery = query;
        
        if (spotifyTrack) {
            searchQuery = `${spotifyTrack.name} ${spotifyTrack.artists[0].name}`;
        }

        // –ò—â–µ–º –Ω–∞ YouTube
        const ytResults = await play.search(searchQuery, { limit: 1 });
        if (!ytResults || ytResults.length === 0) {
            return interaction.reply('‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }

        const video = ytResults[0];
        const stream = await play.stream(video.url);

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        const connection = joinVoiceChannel({
            channelId: voiceChannel.id,
            guildId: interaction.guild.id,
            adapterCreator: interaction.guild.voiceAdapterCreator,
        });

        // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä
        const player = createAudioPlayer({
            behaviors: {
                noSubscriber: NoSubscriberBehavior.Play
            }
        });

        const resource = createAudioResource(stream.stream, {
            inputType: stream.type
        });

        player.play(resource);
        connection.subscribe(player);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–µ–µ—Ä
        client.players.set(interaction.guild.id, { player, connection });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–ª–µ–µ—Ä–∞
        player.on(AudioPlayerStatus.Playing, () => {
            console.log('üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å');
        });

        player.on(AudioPlayerStatus.Idle, () => {
            console.log('‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            connection.destroy();
            client.players.delete(interaction.guild.id);
        });

        player.on('error', error => {
            console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
            interaction.followUp('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏!');
        });

        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π embed
        const embed = new EmbedBuilder()
            .setColor('#1DB954')
            .setTitle('üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç')
            .setDescription(`**${video.title}**`)
            .setThumbnail(video.thumbnails[0].url)
            .addFields(
                { name: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: video.durationRaw, inline: true },
                { name: '–ö–∞–Ω–∞–ª', value: video.channel.name, inline: true }
            )
            .setTimestamp();

        if (spotifyTrack) {
            embed.addFields(
                { name: 'Spotify', value: `[–û—Ç–∫—Ä—ã—Ç—å –≤ Spotify](${spotifyTrack.external_urls.spotify})`, inline: true }
            );
        }

        await interaction.reply({ embeds: [embed] });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
        await interaction.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –º—É–∑—ã–∫–∏!');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
client.on('messageCreate', async (message) => {
    if (message.author.bot || !message.content.startsWith(PREFIX)) return;

    const args = message.content.slice(PREFIX.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    switch (command) {
        case 'play':
        case 'p':
            if (args.length === 0) {
                return message.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞!');
            }
            const query = args.join(' ');
            await playMusic(message, query);
            break;

        case 'stop':
        case 's':
            const playerData = client.players.get(message.guild.id);
            if (playerData) {
                playerData.player.stop();
                playerData.connection.destroy();
                client.players.delete(message.guild.id);
                message.reply('‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            } else {
                message.reply('‚ùå –ë–æ—Ç –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –º—É–∑—ã–∫—É!');
            }
            break;

        case 'pause':
        case 'pause':
            const pausePlayer = client.players.get(message.guild.id);
            if (pausePlayer && pausePlayer.player.state.status === AudioPlayerStatus.Playing) {
                pausePlayer.player.pause();
                message.reply('‚è∏Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            } else {
                message.reply('‚ùå –ù–µ—á–µ–≥–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å!');
            }
            break;

        case 'resume':
        case 'r':
            const resumePlayer = client.players.get(message.guild.id);
            if (resumePlayer && resumePlayer.player.state.status === AudioPlayerStatus.Paused) {
                resumePlayer.player.unpause();
                message.reply('‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ');
            } else {
                message.reply('‚ùå –ù–µ—á–µ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å!');
            }
            break;

        case 'help':
        case 'h':
            const helpEmbed = new EmbedBuilder()
                .setColor('#1DB954')
                .setTitle('üéµ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º')
                .setDescription('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:')
                .addFields(
                    { name: `${PREFIX}play <—Ç—Ä–µ–∫>`, value: '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫', inline: false },
                    { name: `${PREFIX}stop`, value: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ', inline: false },
                    { name: `${PREFIX}pause`, value: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ', inline: false },
                    { name: `${PREFIX}resume`, value: '–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ', inline: false },
                    { name: `${PREFIX}help`, value: '–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É', inline: false }
                )
                .setFooter({ text: 'Spotify Discord Bot' });
            message.reply({ embeds: [helpEmbed] });
            break;
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ slash –∫–æ–º–∞–Ω–¥
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isChatInputCommand()) return;

    const { commandName } = interaction;

    switch (commandName) {
        case 'play':
            const query = interaction.options.getString('query');
            await playMusic(interaction, query);
            break;

        case 'stop':
            const playerData = client.players.get(interaction.guild.id);
            if (playerData) {
                playerData.player.stop();
                playerData.connection.destroy();
                client.players.delete(interaction.guild.id);
                await interaction.reply('‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            } else {
                await interaction.reply('‚ùå –ë–æ—Ç –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –º—É–∑—ã–∫—É!');
            }
            break;
    }
});

// –°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
client.on('ready', async () => {
    console.log(`ü§ñ –ë–æ—Ç ${client.user.tag} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!`);
    console.log(`üìä –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ ${client.guilds.cache.size} —Å–µ—Ä–≤–µ—Ä–∞—Ö`);
    
    // –ü–æ–ª—É—á–∞–µ–º Spotify —Ç–æ–∫–µ–Ω
    await getSpotifyToken();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    client.user.setActivity('üéµ Spotify Music', { type: 'LISTENING' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
client.on('error', error => {
    console.error('–û—à–∏–±–∫–∞ Discord –∫–ª–∏–µ–Ω—Ç–∞:', error);
});

process.on('unhandledRejection', error => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
client.login(process.env.DISCORD_TOKEN);
